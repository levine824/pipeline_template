import java.util.*;
import java.text.SimpleDateFormat;
//  #####################     pipeline init read config     ####################
def Properties readAllConfig(cfgfilepath){

        String remotefileC = readFile  encoding: 'UTF-8', file:  cfgfilepath
        
		Properties myP = new Properties();
		try {
    		myP.load(new StringReader(remotefileC))
		}catch(IOException e){
			echo "ERROR: 读取配置异常 " + e
			return myP;
		}
		return myP
}

def String getOneConfig(Properties myP , String queryKey){
	if (myP.getProperty(queryKey) != null) {
		return myP.getProperty(queryKey).replaceAll("^\"|\"\$", "")
	} else {
		throw new Exception ("ERROR：配置" + queryKey + "不存在！ " )
	}
}
//  ###########################        send MQ msg         ###########################
// createMQBody
def createMQBody(stage_name,build_id,status,msg){
    // flag: 
    // 0 -> 成功
    // 1 -> 失败
    return '{ "taskName":"'+ stage_name +'" , "buildNum":"' + build_id + '" , "buildEndFlag":"' + status +'" , "buildErrorMsg":"' + msg  + '"}'
}
// sendMQ
def sendMQ(status) {

    MQName = "${STAGE_NAME}"
    
    // MQBody 
    if (status == "success") {
        Msg=""
        MQBody = createMQBody(JOB_NAME,BUILD_ID,0,Msg)
    }else {
        Msg="${STAGE_NAME}" + " 失败"
        MQBody = createMQBody(JOB_NAME,BUILD_ID,1,Msg)
    }

    // 发送 MQ
    if (stage_name == "INIT") {
        sh "python3 ./scripts/RMQProducer.py ${MQIP} ${MQPort} ${MQUser} ${MQPwd} ${MQLevel}  ${MQName} '${MQBody}' "
    } else {
        sh "python3 ${JOB_NAME}/scripts/RMQProducer.py ${MQIP} ${MQPort} ${MQUser} ${MQPwd} ${MQLevel}  ${MQName} '${MQBody}' "
    }

}
// #####################    发送 packageName to MQ      ###############################
def sendMQForPackage(status,packagename) {

    MQName = "${STAGE_NAME}"
    
    // MQBody 
    if (status == "success") {
        if (stage_name == "PACKAGE") {
            Msg=packagename
        }else {
            Msg=""
        }
        
        MQBody = createMQBody(JOB_NAME,BUILD_ID,0,Msg)
    }else {
        Msg="${STAGE_NAME}" + " 失败"
        MQBody = createMQBody(JOB_NAME,BUILD_ID,1,Msg)
    }

    // 发送 MQ
 
    sh "python3 ${JOB_NAME}/scripts/RMQProducer.py ${MQIP} ${MQPort} ${MQUser} ${MQPwd} ${MQLevel}  ${MQName} '${MQBody}' "

}

// #####################    获取当前时间戳      ##############################

def today(){
    String str = "";
    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdHHmmss");
    Calendar lastDate = Calendar.getInstance();
    lastDate.add(Calendar.MINUTE, 2);
    str = sdf.format(lastDate.getTime());
    return str;
}
//  ###################     获取带时间戳的 packageName      #################
def String getPackageName(String packagename) {

    String dateNew = today()

    str = packagename.split("\\.tar.gz|\\.apk|\\.ipa").toList()
    
    if (packagename.matches("(.*)-[0-9]{14}.(.*)") ){
			return packagename
	}
    
    if (packagename.endsWith(".tar.gz")) {
        packagename = str[0] + "-" + dateNew + ".tar.gz"
    }

    if (packagename.endsWith(".apk")) {
        packagename = str[0] + "-" + dateNew + ".apk"
    }

    if (packagename.endsWith(".ipa")) {
        packagename = str[0] + "-" + dateNew + ".ipa"
    }
 
    return packagename
}

// ####################################################################################
pipeline {
    
    // 默认agent 
    // agent none

    // 下面这个 label 值可以为  node name
    agent {
        label "${LABEL}"
    }
    // agent {
    //    node {
    //        label 'dev_build'
    //    }
    // }


    // jenkins 参数设置
    options {
        timestamps()
        // 在agent指令中默认跳过来自源代码控制的代码
        skipDefaultCheckout() 
        // 设置Pipeline运行的超时时间
        timeout(time: 1, unit: 'HOURS')  
        // 失败后，重试整个Pipeline的次数
        // retry(1)  
        // 构建历史设置
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '90')) 
    }
    // 定时触发任务
    // triggers {
    //     cron('H 4/* 0 0 1-5')  // 或  pollSCM('H 4/* 0 0 1-5')
    // }

    // 环境变量
    environment {        
        // init config info
         //INIT_IMAGE="harbor.zznode.com/public/code:0.1"
		INIT_IMAGE="${params.INIT_IMAGE}"
        CONFIG_URL="${params.CONFIG_URL}"
        CONFIG_PATH="config.properties"
        CONFIG_CERT_ID="001"
        
        FTP_DEST="${params.FTP_DEST}"
        FTP_HOST="${params.FTP_HOST}"
        FTP_USER="${params.FTP_USER}"
        FTP_PASSWORD="${params.FTP_PASSWORD}"
        PACKAGE_NAME=getPackageName("${params.PACKAGE_NAME}")

        LABEL="${params.LABEL}"

        COMMIT_ID="${params.COMMIT_ID}"

        // ios 项目路径
        //PROJECT_PATH="${params.PROJECT_PATH}"
        // ios 项目名称
        //PROJECT_NAME="${params.PROJECT_NAME}"
        // ios证书路径
        //CRT_PATH="${params.CRT_PATH}"

        // PROJECT_PATH="./ios"
        // PROJECT_NAME="Runner"
        // CRT_PATH="/Users/zznode/Desktop/ios_crt"

    }

    stages {
        // 0. 配置初始化
        stage('INIT') {
            // agent {
            //     docker {
            //         image "${INIT_IMAGE}"
            //     }
            // }
            // steps
            steps {
                script {
                    checkout([$class: "SubversionSCM", additionalCredentials: [], excludedCommitMessages: "", excludedRegions: "", excludedRevprop: "", excludedUsers: "", filterChangelog: false, ignoreDirPropChanges: false, includedRegions: "", locations: [[cancelProcessOnExternalsFail: true, credentialsId: "${CONFIG_CERT_ID}", depthOption: "infinity", ignoreExternalsOption: true, local: ".", remote: "${CONFIG_URL}"]], quietOperation: true, workspaceUpdater: [$class: "UpdateWithRevertUpdater"]])
                    
                    cfg=readAllConfig(CONFIG_PATH)
                    // MQ_INFO
                    MQIP=getOneConfig(cfg,"MQIP")
                    MQPort=getOneConfig(cfg,"MQPort")
                    MQUser=getOneConfig(cfg,"MQUser")
                    MQPwd=getOneConfig(cfg,"MQPwd")
                    MQLevel=getOneConfig(cfg,"MQLevel")
                    //flag
                    TEST_FLAG=getOneConfig(cfg,"TEST_FLAG")
                    SCAN_FLAG=getOneConfig(cfg,"SCAN_FLAG")
                    BUILD_FLAG=getOneConfig(cfg,"BUILD_FLAG")
                    UPLOAD_FLAG=getOneConfig(cfg,"UPLOAD_FLAG")
                    // code
                    GIT_BRANCH=getOneConfig(cfg,"GIT_BRANCH")
                    CERT_ID=getOneConfig(cfg,"CERT_ID")
                    CODE_URL=getOneConfig(cfg,"CODE_URL")
                    CODE_TYPE=getOneConfig(cfg,"CODE_TYPE")
                    CODE_IMAGE=getOneConfig(cfg,"CODE_IMAGE")

                    SVN_USER=getOneConfig(cfg,"SVN_USER")
                    SVN_PASSWORD=getOneConfig(cfg,"SVN_PASSWORD")
                            
                    // code-scan
                    // SCAN_IMAGE=getOneConfig(cfg,"SCAN_IMAGE")
                    // SCAN_CMD=getOneConfig(cfg,"SCAN_CMD")

                    // test
                    // TEST_IMAGE=getOneConfig(cfg,"TEST_IMAGE")
                    // TEST_CMD=getOneConfig(cfg,"TEST_CMD")
                    // build
                    BUILD_CMD=getOneConfig(cfg,"BUILD_CMD")
                    // upload
                    ARTIFACT_FILE_TYPE=getOneConfig(cfg,"ARTIFACT_FILE_TYPE")
                    // ftp
                    FTP_HOST=getOneConfig(cfg,"FTP_HOST")
                    FTP_USER=getOneConfig(cfg,"FTP_USER")
                    FTP_PASSWORD=getOneConfig(cfg,"FTP_PASSWORD")
                    FTP_DEST=getOneConfig(cfg,"FTP_DEST")
                    // FTP_SRC=getOneConfig(cfg,"FTP_SRC")
					
                    // ios
                    PROJECT_PATH=getOneConfig(cfg,"PROJECT_PATH")
                    PROJECT_NAME=getOneConfig(cfg,"PROJECT_NAME")
                    CRT_PATH=getOneConfig(cfg,"CRT_PATH")
                    SYS_PASSWORD=getOneConfig(cfg,"SYS_PASSWORD")
                    MobileprovisionName=getOneConfig(cfg,"MobileprovisionName")
                    
                    // FINAL
                }   
            }
            post {
                success {
                    script {
                        sendMQ("success")
                    }
                }
                failure {
                    script {
                        sendMQ("faild")
                    }
                }
            }         

        }
        // 1. 代码检出
        // svn co --username admin --password 123456 --no-auth-cache svn://10.2.6.79/zznode/devops
        stage('CHECK_OUT'){
            // agent
            // agent {
            //     docker "${CODE_IMAGE}"
            // }
            // steps
            steps {
                script {
                    
                    if ( CODE_TYPE == 'git' ) {
                        checkout([$class: "GitSCM", branches: [[name: "${GIT_BRANCH}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: "CleanBeforeCheckout", deleteUntrackedNestedRepositories: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${CERT_ID}", url: "$CODE_URL"]]])
                    } 
					if (( CODE_TYPE == 'svn' ) && ( COMMIT_ID == ' ' )) {
                        checkout([$class: "SubversionSCM", additionalCredentials: [], excludedCommitMessages: "", excludedRegions: "", excludedRevprop: "", excludedUsers: "", filterChangelog: false, ignoreDirPropChanges: false, includedRegions: "", locations: [[cancelProcessOnExternalsFail: true, credentialsId: "${CERT_ID}", depthOption: "infinity", ignoreExternalsOption: true, local: ".", remote: "${CODE_URL}"]], quietOperation: true, workspaceUpdater: [$class: "UpdateWithRevertUpdater"]])
                    }
					if (( CODE_TYPE == 'svn' ) && ( COMMIT_ID != ' ' )) {
                        checkout([$class: "SubversionSCM", additionalCredentials: [], excludedCommitMessages: "", excludedRegions: "", excludedRevprop: "", excludedUsers: "", filterChangelog: false, ignoreDirPropChanges: false, includedRegions: "", locations: [[cancelProcessOnExternalsFail: true, credentialsId: "${CERT_ID}", depthOption: "infinity", ignoreExternalsOption: true, local: ".", remote: "${CODE_URL}@${COMMIT_ID}"]], quietOperation: true, workspaceUpdater: [$class: "UpdateWithRevertUpdater"]])
                    }
                }
            }
            // 发送执行通知
            post {
                success {
                    script {
                        sh "/usr/local/bin/svn co --username ${SVN_USER} --password ${SVN_PASSWORD} --no-auth-cache ${CONFIG_URL}"
                        
                        // git commit_id
                        if ( CODE_TYPE == 'git' ) {
                            sh "git reset --hard ${COMMIT_ID}"
                        }

                        sendMQ("success")
                    }
                }
                failure {
                    script {
                        sendMQ("faild")
                    }
                }
            }
        } 

        // 2. 单元测试

        // 3. build 
        stage('COMPILE') {
            // 执行开关
            when { 
                expression {
                    return (BUILD_FLAG == "true" )
                }
            }
        
        
            // steps
            steps {

                sh "export PROJECT_PATH=${PROJECT_PATH}; \
                    export PROJECT_NAME=${PROJECT_NAME}; \
                    export CRT_PATH=${CRT_PATH}; \
                    export SYS_PASSWORD=${SYS_PASSWORD}; \
                    export MobileprovisionName=${MobileprovisionName};\
                    ${BUILD_CMD}"
            }

            // 发送执行通知
            post {
                success {
                    script {
                        // 将构建文件 打包
                        sh "cd ${PACKAGE_DIR};mv ${PACKAGE_LIST} ${PACKAGE_NAME}"  
                        sendMQ("success")
                    }
                }
                failure {
                    script {
                        sendMQ("faild")
                    }
                }
            }
        }
        // 4. 代码扫描
        stage('SCAN_CODE') {
            // 执行开关
            when { 
                expression {
                    return (SCAN_FLAG == "true" )
                }
            }
        
        
            // steps
            steps {
                sh "/usr/local/sonar-scanner/bin/sonar-scanner"
            }

            // 发送执行通知
            post {
                success {
                    script {
                        sendMQ("success")
                    }
                }
                failure {
                    script {
                        sendMQ("faild")
                    }
                }
            }
        }

        // 5. 上传包到制品库
        stage('PACKAGE') {
            // 执行开关
            when { 
                expression {
                    return (UPLOAD_FLAG == "true" )
                }
            }
            // agent
            // agent {
            //     docker {
            //         image "${UPLOAD_IMAGE}"
            //         args "--privileged \
            //         -v /var/run/docker.sock:/var/run/docker.sock "
            //     }
            // }

            // steps
            steps {
                script {
                    // 这里的 PACKAGE_DIR = FTP_SRC
                    sh "source ~/.zshrc; lftp ${FTP_HOST} -u ${FTP_USER},${FTP_PASSWORD} -e 'cd ${FTP_DEST};lcd ${PACKAGE_DIR};put ${PACKAGE_NAME};bye' "
                }
                  
            }

            // 发送执行通知
            post {
                success {
                    script {
                        sendMQForPackage("success",PACKAGE_NAME)
                    }
                }
                failure {
                    script {
                        sendMQ("faild")
                    }
                }
            }
        }
        
        // 8. final 阶段(必须执行), 只用于发送MQ通知
        stage('FINAL') {
            // agent
            // agent {
            //     docker {
            //         image "${FINAL_IMAGE}"
            //     }
            // }
            // step
            steps {
                script {
                    sh "echo final ......"
                }
                
            }
            // 发送执行通知
            post {
                success {
                    script {
                        sendMQ("success")
                    }
                }
                failure {
                    script {
                        sendMQ("faild")
                    }
                }
            }
        }    
    }


}
